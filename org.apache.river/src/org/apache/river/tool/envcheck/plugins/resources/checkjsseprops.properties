#/*
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#*/

configExp=Secure configurations may require access to a {0} \
          as defined by the system property {1}

truststore=trust store
truststoreOK=The trust store is defined and accessible

discoverystore=discovery trust store
discoverystoreOK=The discovery trust store is defined and accessible
dsExp=Secure discovery requires access to a discovery trust store \
      as defined by the system property org.apache.river.discovery.x500.trustStore

keystore=key store
keystoreOK=The key store is defined and accessible
loginconfig=login configuration file
loginconfigOK=The login configuration file is defined and accessible

loginInitOK=The login configuration initialized successfully
loginInitBad=The login configuration failed to initialize

providerOK=Security provider is DynamicPolicyProvider

providerBad=Security provider is NOT DynamicPolicyProvider

providerExp=Secure Jini clients and services must often be configured to use \
            the DynamicPolicyProvider. A common way to do this is \
	    is to create a security properties file containing the definition \
            'policy.provider=net.jini.security.policy.DynamicPolicyProvider.' \
            The system property java.security.properties is used to pass \
	    the name of the security properties file to the VM

cmdlineVM=The command line

groupVM=The activation group

noconfigfiles=No login configuration files were found

fromProp=system property java.security.auth.login.config

withOverride=(defined to override other sources)

secprop=security property {0}

userfile=user home directory

badname=illegal file name defined by java.security.auth.login.config: {0}

malformedurl=malformed URL {0}

accessexception=Attempting to access {0} as defined by {1} resulted in an exception

noprop=No {1} defined by property {0}

loginConfigExp=Creation of a JAAS login context generally requires access \
               to login configuration files. A login configuration file \
               may be identified by the java.security.auth.login.config \
               system property. Alternatively, or in addition, login \
               configuration files may be identified by one or more security \
	       properties named login.config.url.<n> where n \
	       is an integer starting with 1. If no login configuration \
	       files are defined as described above, then a file named \
               .java.login.config in the users home directory is searched for.